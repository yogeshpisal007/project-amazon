"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4519],{24519:function(n,t,e){e.d(t,{Hg:function(){return x},LI:function(){return y},Vh:function(){return g},dW:function(){return A},g3:function(){return D},jI:function(){return M},lq:function(){return R},zU:function(){return b}});var r,s,i,a,o,u,c,m,d=e(59499),E=e(71383),l=e(68806),p=e(84852),T=e(26341);function f(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function I(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?f(Object(e),!0).forEach((function(t){(0,d.Z)(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):f(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var A=function(n){var t=n.testId,e=n.token;return T.Z.query({query:(0,l.Ps)(r||(r=(0,E.Z)(["\n        query Instructions($testId: ID!) {\n          test(id: $testId) {\n            name {\n              en\n            }\n            languages {\n              code\n              name\n            }\n            exams {\n              slug\n            }\n            paid\n            type\n            publishDate\n            availableTill\n            ","\n            instruction {\n              text {\n                ","\n              }\n            }\n          }\n        }\n      "])),e?"attempt {\n                canAttempt\n                status\n              }":"",p.zx),variables:{testId:t,token:e}})},g=function(n){var t=n.attemptLanguage,e=n.testId,r=n.token,i=n.testSeriesId;return T.Z.mutate({mutation:(0,l.Ps)(s||(s=(0,E.Z)(["\n      mutation ($testId: ID!, $testSeriesId: ID, $attemptLanguage: Language) {\n        startTest(\n          input: {\n            testId: $testId\n            testSeriesId: $testSeriesId\n            attemptLanguage: $attemptLanguage\n          }\n        ) {\n          id\n          status\n          attemptLanguage\n          testData {\n            name {\n              en\n            }\n            exams {\n              slug\n            }\n            languages {\n              code\n              name\n            }\n            maxAttemptableQuestions\n            availableTill\n            resumable\n            type\n            sectionSwitchable\n            totalTime\n            totalMarks\n            sections {\n              name {\n                en\n              }\n              totalMarks\n              totalTime\n              totalQuestions\n              maxAttemptableQuestions\n              questions {\n                id\n                qIndex\n                text {\n                  ","\n                }\n                shortText {\n                  ","\n                }\n                languages {\n                  code\n                  name\n                }\n                positiveMarks\n                negativeMarks\n                parent {\n                  text {\n                    ","\n                  }\n                }\n                type\n                ... on SingleAnswerMCQ {\n                  options {\n                    content {\n                      ","\n                    }\n                  }\n                }\n                ... on MultiAnswerMCQ {\n                  options {\n                    content {\n                      ","\n                    }\n                  }\n                }\n              }\n            }\n          }\n          sectionProgressCounts\n          progress {\n            lastSectionIndex\n            lastQuestionIndex\n            timeLeft\n            sectionTimeLeft\n            questions {\n              choice\n              choices\n              value\n              status\n              time\n            }\n          }\n        }\n      }\n    "])),p.zx,p.zx,p.zx,p.zx,p.zx),variables:{testId:e,attemptLanguage:t,token:r,testSeriesId:i}})},D=function(n,t,e){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"PROGRESS",s=I({},e);return delete s.__typename,s.questions=s.questions.map((function(n,t){return delete n.__typename,I(I({},n),{},{qIndex:t})})),T.Z.mutate({mutation:(0,l.Ps)(i||(i=(0,E.Z)(["\n      mutation (\n        $attemptId: ID!\n        $attemptLanguage: Language\n        $progress: TestAttemptProgressInput!\n        $type: TestAttemptStatus!\n      ) {\n        updateTestProgress(\n          input: {\n            id: $attemptId\n            attemptLanguage: $attemptLanguage\n            status: $type\n            progress: $progress\n          }\n        ) {\n          sectionProgressCounts\n          status\n          attemptLanguage\n          progress {\n            lastSectionIndex\n            lastQuestionIndex\n            timeLeft\n            sectionTimeLeft\n            questions {\n              choice\n              choices\n              value\n              status\n              time\n            }\n          }\n        }\n      }\n    "]))),variables:{attemptId:n,attemptLanguage:t,progress:s,type:r}})},R=function(n,t,e,r){return T.Z.mutate({mutation:(0,l.Ps)(a||(a=(0,E.Z)(["\n      mutation reportProblem(\n        $itemId: ID!\n        $itemType: ReportItemType!\n        $problems: [ProblemType!]\n        $message: String\n      ) {\n        reportProblem(\n          input: {\n            itemId: $itemId\n            itemType: $itemType\n            problems: $problems\n            message: $message\n          }\n        ) {\n          id\n        }\n      }\n    "]))),variables:{itemId:n,itemType:t,message:e,problems:r}})},b=function(n,t){return T.Z.query({query:(0,l.Ps)(o||(o=(0,E.Z)(["\n      fragment scoreFields on TestAttemptScores {\n        total\n        correct\n        incorrect\n        timeTaken\n        accuracy\n        percentile\n        rank\n        attempt\n      }\n      fragment topicFields on TestAttemptTopic {\n        topicId\n        name {\n          default\n        }\n        qIndexes\n        accuracy\n      }\n      query AnalyseTest($testAttemptId: ID!) {\n        testAttempt(id: $testAttemptId) {\n          canAttempt\n          result {\n            questionAttempts {\n              isAttempted\n              isCorrect\n              qIndex\n            }\n            sectionWiseAttempts {\n              name {\n                en\n              }\n              questions {\n                isAttempted\n                isMarked\n                isCorrect\n                qIndex\n                questionData {\n                  negativeMarks\n                  positiveMarks\n                  shortText(limit: 50) {\n                    en\n                  }\n                }\n              }\n            }\n            scores {\n              ...scoreFields\n            }\n            sectionScores {\n              ...scoreFields\n            }\n            topics {\n              strong {\n                ...topicFields\n              }\n              weak {\n                ...topicFields\n              }\n              uncategorized {\n                ...topicFields\n              }\n            }\n            difficultyStats {\n              difficulty\n              correctCount\n              qIndexes\n            }\n            compareStats {\n              average {\n                ...scoreFields\n              }\n              topper {\n                ...scoreFields\n              }\n              user {\n                ...scoreFields\n              }\n            }\n          }\n          testData {\n            name {\n              en\n            }\n            type\n            exams {\n              slug\n            }\n            leaderboard(limit: 5) {\n              nodes {\n                userId\n                user {\n                  name\n                }\n                marks\n              }\n            }\n            maxAttemptableQuestions\n            totalMarks\n            uniqueAttempts\n            totalTime\n            sections {\n              name {\n                en\n              }\n              maxAttemptableQuestions\n              totalQuestions\n              totalMarks\n            }\n            rating {\n              feedback\n              id\n              message\n              stars\n            }\n          }\n          testId\n        }\n      }\n    "]))),variables:{testAttemptId:n,token:t}})},M=function(n){var t=n.itemId,e=n.feedback,r=n.message,s=n.stars,i=n.itemType;return T.Z.mutate({mutation:(0,l.Ps)(u||(u=(0,E.Z)(["\n      mutation (\n        $itemId: ID!\n        $feedback: [FeedbackType!]!\n        $message: String\n        $stars: Int!\n        $itemType: RatingItemTypes!\n      ) {\n        addRating(\n          input: {\n            itemId: $itemId\n            feedback: $feedback\n            message: $message\n            stars: $stars\n            itemType: $itemType\n          }\n        ) {\n          ... on TestRating {\n            itemId\n            feedback\n            stars\n            message\n          }\n          ... on VideoRating {\n            itemId\n            feedback\n            stars\n            message\n          }\n        }\n      }\n    "]))),variables:{itemType:i,feedback:e,message:r,stars:s,itemId:t}})},y=function(n,t){return T.Z.query({query:(0,l.Ps)(c||(c=(0,E.Z)(["\n      query TestSolutions($testAttemptId: ID!) {\n        testAttempt(id: $testAttemptId) {\n          attemptLanguage\n          result {\n            questionAttempts {\n              isAttempted\n              isCorrect\n              qIndex\n              questionData {\n                shortText(limit: 50) {\n                  ","\n                }\n              }\n            }\n            sectionWiseAttempts {\n              name {\n                en\n              }\n              questions {\n                attemptData {\n                  choice\n                  choices\n                  status\n                  time\n                  value\n                }\n                isAttempted\n                isCorrect\n                isMarked\n                qIndex\n                sectionIndex\n                questionData {\n                  id\n                  qIndex\n                  type\n                  shortText(limit: 50) {\n                    ","\n                  }\n                  text {\n                    ","\n                  }\n                  isBookmarked\n                  positiveMarks\n                  negativeMarks\n                  parent {\n                    text {\n                      ","\n                    }\n                  }\n                  ... on SingleAnswerMCQ {\n                    options {\n                      content {\n                        ","\n                      }\n                      isCorrect\n                    }\n                  }\n                  ... on MultiAnswerMCQ {\n                    options {\n                      content {\n                        ","\n                      }\n                      isCorrect\n                    }\n                  }\n                  ... on RangeQuestion {\n                    answerRange\n                  }\n                  solution {\n                    conceptIds\n                    formulaIds\n                    concepts {\n                      id\n                      details {\n                        ","\n                      }\n                      name {\n                        ","\n                      }\n                      status\n                    }\n                    formulas {\n                      id\n                      expression {\n                        ","\n                      }\n                      name {\n                        ","\n                      }\n                      status\n                    }\n                    text {\n                      ","\n                    }\n                  }\n                }\n              }\n            }\n          }\n          testData {\n            id\n            name {\n              en\n            }\n            languages {\n              code\n              name\n            }\n            sections {\n              questions {\n                languages {\n                  code\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    "])),p.zx,p.zx,p.zx,p.zx,p.zx,p.zx,p.zx,p.zx,p.zx,p.zx,p.zx),variables:{testAttemptId:n,token:t}})},x=function(n){var t=n.testAttemptId,e=n.token;return T.Z.query({query:(0,l.Ps)(m||(m=(0,E.Z)(["\n      fragment scoreFields on TestAttemptScores {\n        total\n        correct\n        incorrect\n        timeTaken\n        accuracy\n        attempt\n      }\n      query AnalyseTest($testAttemptId: ID!) {\n        testAttempt(id: $testAttemptId) {\n          result {\n            scores {\n              ...scoreFields\n            }\n          }\n          testData {\n            name {\n              en\n            }\n            exams {\n              examCategories {\n                id\n              }\n            }\n            type\n            resultAfter\n            availableTill\n            totalQuestions\n            totalMarks\n          }\n        }\n      }\n    "]))),variables:{testAttemptId:t,token:e}})}},84852:function(n,t,e){e.d(t,{$t:function(){return E},Bv:function(){return q},EG:function(){return f},ID:function(){return l},JH:function(){return T},Jw:function(){return k},LB:function(){return p},Oo:function(){return P},S9:function(){return x},TB:function(){return M},TI:function(){return S},XE:function(){return m},ZY:function(){return d},Ze:function(){return R},a5:function(){return y},au:function(){return b},d0:function(){return h},gA:function(){return $},gT:function(){return D},hj:function(){return O},jy:function(){return _},lR:function(){return v},pC:function(){return I},r:function(){return C},uI:function(){return A},zx:function(){return c}});var r=e(59499),s=e(27812),i=e(41609),a=e.n(i);function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function u(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){(0,r.Z)(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}var c="default en hn te mr bn ml gu kn ta or",m={UNVIEWED:"UNVIEWED",VIEWED:"VIEWED",MARKED:"MARKED",ATTEMPTED:"ATTEMPTED",MARKED_ATTEMPTED:"MARKED_ATTEMPTED",TOTAL:"TOTAL"},d={COMPLETE:"COMPLETE",PROGRESS:"PROGRESS",PAUSE:"PAUSE",FRESH:"FRESH"},E=function(n){return n===m.MARKED||n===m.MARKED_ATTEMPTED},l={CORRECT:"correct",INCORRECT:"incorrect",UNATTEMPTED:"unattempted",MARKED:"marked"},p={PREVIOUS_YEAR:"PREVIOUS_YEAR",MOCK:"MOCK",QUIZ:"QUIZ",SCHOLARSHIP:"SCHOLARSHIP",CURRENT_AFFAIR_QUIZ:"CURRENT_AFFAIR_QUIZ"},T={CURRENT_AFFAIRS:"CURRENT_AFFAIRS"},f={CURRENT_AFFAIRS:"CURRENT_AFFAIRS"},I={TEST:"TEST"},A={TEST:"TEST",POST:"POST",VIDEO:"VIDEO"},g={PREVIOUS_YEAR:"previous-year-papers",QUIZ:"quizzes"},D=function(n,t){var e=t.questions;return n.reduce((function(n,t,r){var i=(0,s.Z)(n);return e.slice(t.questions[0].qIndex,t.questions[t.totalQuestions-1].qIndex+1).forEach((function(n,t){i[r][n.status][t]=!0})),i[r].UNVIEWED.count=Object.keys(i[r].UNVIEWED).length,i[r].VIEWED.count=Object.keys(i[r].VIEWED).length,i[r].ATTEMPTED.count=Object.keys(i[r].ATTEMPTED).length,i[r].MARKED.count=Object.keys(i[r].MARKED).length,i[r].MARKED_ATTEMPTED.count=Object.keys(i[r].MARKED_ATTEMPTED).length,i}),n.map((function(n){return{UNVIEWED:{},VIEWED:{},ATTEMPTED:{},MARKED:{},MARKED_ATTEMPTED:{},TOTAL:n.totalQuestions}})))},R=function(n,t){var e,r="quiz"===(null===n||void 0===n||null===(e=n.split("_")[1])||void 0===e?void 0:e.toLowerCase())?"quizzes":"tests";return"LIVE_TEST"===n?{url:"/live-tests",text:"Live ".concat(r)}:"LIVE_QUIZ"===n?{url:"/live-quizzes",text:"Live ".concat(r)}:t?{url:"/test-series/tests/".concat(t),text:"Test Series"}:g[n]?{url:"/".concat(g[n]),text:"Tests"}:{url:"/test-series",text:"Test Series"}};function b(n,t){return t[n]}function M(n){var t="";switch(n){case m.ATTEMPTED:t="answered";break;case m.MARKED_ATTEMPTED:t="marked-for-review";break;case m.UNVIEWED:t="unattempted";break;case m.VIEWED:t="not-answered";break;case m.MARKED:t="marked"}return t}function y(n,t){var e=t[n].count;switch(n){case m.ATTEMPTED:case m.MARKED:e+=t[m.MARKED_ATTEMPTED].count;break;case m.VIEWED:e+=t[m.MARKED].count}return e}var x=function(n){return null!==n.choice||n.choices.length>0||null!==n.value&&void 0!==n.value},v=function(n,t,e,r,s){var i=n;return i&&i!==m.UNVIEWED||(i=m.VIEWED),t&&(i=i===m.MARKED||i===m.MARKED_ATTEMPTED?m.MARKED:m.VIEWED),e&&r?i=s?m.MARKED_ATTEMPTED:m.MARKED:e?i===m.MARKED?i=m.VIEWED:i===m.VIEWED?i=m.MARKED:i===m.MARKED_ATTEMPTED?i=m.ATTEMPTED:i===m.ATTEMPTED&&(i=m.MARKED_ATTEMPTED):r&&s&&(i===m.MARKED?i=m.MARKED_ATTEMPTED:i===m.VIEWED&&(i=m.ATTEMPTED)),i},P=function(n,t){if(a()(t))return{};var e=t.sectionIndex,r=t.questionIndex,s=n[e].totalQuestions-1===r,i=0===r;return{isSectionalLast:s,isSectionalFirst:i,isFirst:i&&0===e,isLast:s&&e===n.length-1}},O=function(n,t){var e=t.sectionIndex,r=t.questionIndex;return P(n,{sectionIndex:e,questionIndex:r}).isSectionalLast?{sectionIndex:e+1,questionIndex:0}:{sectionIndex:e,questionIndex:r+1}},S=function(n,t){var e=t.sectionIndex,r=t.questionIndex;return P(n,{sectionIndex:e,questionIndex:r}).isSectionalFirst?{sectionIndex:e-1,questionIndex:n[e-1].totalQuestions-1}:{sectionIndex:e,questionIndex:r-1}};function k(n){var t="";switch(n){case m.ATTEMPTED:t="Attempted";break;case m.MARKED_ATTEMPTED:t="Marked Attempted";break;case m.UNVIEWED:t="Unseen";break;case m.VIEWED:t="Unattempted";break;case m.MARKED:t="Marked"}return t}var q=function(n,t){var e=t.find((function(t){return t.qIndex===n}));return!!e&&(e.isAttempted?e.isCorrect?l.CORRECT:l.INCORRECT:l.UNATTEMPTED)},C=function(n,t){return t.reduce((function(t,e){var r=e.questions.filter((function(t){var e=t.isCorrect,r=t.isMarked,s=t.isAttempted;switch(n){case l.CORRECT:return e;case l.INCORRECT:return s&&!e;case l.UNATTEMPTED:return!s;case l.MARKED:return s&&!e&&r;default:return!1}}));return a()(r)||t.push(u(u({},e),{},{questions:r})),t}),[])},h=function(n,t){return t.length>n?"".concat(t.substring(0,n),".."):t},$=function(n,t){return t.filter((function(t){var e=t.isCorrect,r=t.isAttempted;switch(n){case l.CORRECT:return e;case l.INCORRECT:return r&&!e;case l.UNATTEMPTED:return!r;default:return!1}})).length},_=function(n){return n===d.PROGRESS||n===d.PAUSE?"Continue":"Start"}},52587:function(n,t,e){function r(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}e.d(t,{Z:function(){return r}})},27812:function(n,t,e){e.d(t,{Z:function(){return i}});var r=e(52587);var s=e(2937);function i(n){return function(n){if(Array.isArray(n))return(0,r.Z)(n)}(n)||function(n){if("undefined"!==typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||(0,s.Z)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},2937:function(n,t,e){e.d(t,{Z:function(){return s}});var r=e(52587);function s(n,t){if(n){if("string"===typeof n)return(0,r.Z)(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?(0,r.Z)(n,t):void 0}}}}]);